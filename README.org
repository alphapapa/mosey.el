#+PROPERTY: LOGGING nil

* mosey.el

[[https://alphapapa.github.io/dont-tread-on-emacs/][dont-tread-on-emacs-150.png]]

Howdy.  Why don't ya mosey on in here.  Have yourself a sit-down.

=mosey= makes it easy to mosey back and forth in your buffers.  Just pass =mosey= a list of functions that move the point to certain places, and it'll mosey the point between those places.  Tell it =:backward= if you want to mosey on back, otherwise it'll mosey on ahead.  Tell it to =:cycle= if you want it to loop around when it gets to one end or the other.

To make it easier for ya, just pass a list of point-moving functions to =defmosey=, and it'll cook up four functions: =mosey/forward=, =mosey/backward=, =mosey/forward-cycle=, and =mosey/backward-cycle=.

* Installation

Well now, all you need to do is put =mosey.el= in your =load-path= and then put this in your init file:

#+BEGIN_SRC elisp
  (require 'mosey)
#+END_SRC

Then you're all set!

* Usage

You can use these commands right off the bat to move within the current line:

+  =mosey/forward=
+  =mosey/backward=
+  =mosey/forward-cycle=
+  =mosey/backward-cycle=

You might want to bind them like this:

#+BEGIN_SRC elisp
  (global-set-key (kbd "C-a") 'mosey/backward)
  (global-set-key (kbd "C-e") 'mosey/forward)
#+END_SRC

But if you're really clever, you'll do it like this:

#+BEGIN_SRC elisp
  (use-package mosey
    :bind* (
            ("C-a" . mosey/backward)
            ("C-e" . mosey/forward)
            ))
#+END_SRC

** Make your own moseys

It's easy to make your own =moseys= with =defmosey=, somethin' like this (this example uses functions from [[https://github.com/Fuco1/smartparens][smartparens]]):

#+BEGIN_SRC elisp
  (defmosey '(beginning-of-line
              back-to-indentation
              sp-backward-sexp  ; Moves across lines
              sp-forward-sexp   ; Moves across lines
              mosey/goto-end-of-code
              mosey/goto-beginning-of-comment-text)
    :prefix "lisp")
#+END_SRC

That'll cook up four functions for ya:

+  =mosey/lisp-forward=
+  =mosey/lisp-backward=
+  =mosey/lisp-forward-cycle=
+  =mosey/lisp-backward-cycle=

Then maybe you'd want to use 'em in your =emacs-lisp-mode=, somethin' like this:

#+BEGIN_SRC elisp
  (bind-keys :map emacs-lisp-mode-map
             ("C-a" . mosey/lisp-backward)
             ("C-e" . mosey/lisp-forward))
  #+END_SRC

* Changelog

** 0.1-pre

+ We're just gettin' started here!

* Credits

+ This package was inspired by Alex Kost's fantastic [[https://github.com/alezost/mwim.el][mwim.el]] package.  It has even more features, so check it out!

* Development

Comments, questions, suggestions, and pull requests are welcome! 

I can't recommend [[https://github.com/tj64/outorg][Outorg]] enough.  If you edit source code and use Emacs, check it out!  Also try =outline-minor-mode=!

** Bugs

None at the moment.  Bug reporter z...I mean, bug zapper, standing by...

** Ideas

*** MAYBE Laundry

It sure would be handy if =mosey= could do the laundry...

* License

GPLv3
